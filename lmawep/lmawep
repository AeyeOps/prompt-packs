#!/bin/bash
# LMAWEP - Local Multi-Agent Workflow Execution Process CLI
# A lightweight CLI for managing local tickets without external dependencies

set -e

LMAWEP_DIR=".lmawep"
TICKETS_DIR="$LMAWEP_DIR/tickets"
CONFIG_FILE="$LMAWEP_DIR/config.yaml"
SEQUENCE_FILE="$LMAWEP_DIR/sequences/ticket-sequence.txt"
HISTORY_DIR="$LMAWEP_DIR/history"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if LMAWEP is initialized
check_init() {
    if [ ! -d "$LMAWEP_DIR" ]; then
        log_error "LMAWEP not initialized. Run './lmawep init' first."
        exit 1
    fi
}

# Get next ticket ID
next_ticket_id() {
    if [ ! -f "$SEQUENCE_FILE" ]; then
        mkdir -p "$(dirname "$SEQUENCE_FILE")"
        echo "1" > "$SEQUENCE_FILE"
        echo "1"
    else
        local current_id=$(cat "$SEQUENCE_FILE")
        local next_id=$((current_id + 1))
        echo "$next_id" > "$SEQUENCE_FILE"
        echo "$next_id"
    fi
}

# Get current timestamp
timestamp() {
    date -u +"%Y-%m-%dT%H:%M:%SZ"
}

# Initialize LMAWEP structure
init_lmawep() {
    if [ -d "$LMAWEP_DIR" ]; then
        log_warn "LMAWEP already initialized in this directory"
        return 0
    fi
    
    log_info "Initializing LMAWEP structure..."
    
    # Create directory structure
    mkdir -p "$TICKETS_DIR"
    mkdir -p "$LMAWEP_DIR/templates"
    mkdir -p "$LMAWEP_DIR/sequences" 
    mkdir -p "$HISTORY_DIR"
    
    # Create config file
    cat > "$CONFIG_FILE" << 'EOF'
# LMAWEP Configuration
version: "1.0"
project_name: ""
default_ticket_type: "task"
default_priority: "medium"
statuses:
  - ready
  - assigned  
  - working
  - blocked
  - review
  - complete
priorities:
  - low
  - medium
  - high
  - critical
ticket_types:
  - feature
  - bug
  - task
  - chore
  - docs
EOF

    # Create ticket templates
    cat > "$LMAWEP_DIR/templates/feature.yaml" << 'EOF'
id: null
title: ""
description: |
  ## Summary
  Brief description of the feature
  
  ## Acceptance Criteria
  - [ ] Criterion 1
  - [ ] Criterion 2
  
  ## Additional Notes
  Any implementation notes or considerations
type: feature
status: ready
priority: medium
estimate: ""
assigned_to: null
dependencies: []
blocks: []
labels: []
created_by: "orchestrator"
created_at: null
updated_at: null
assignee_notes: ""
time_estimates:
  initial: null
  revised: null
actual_time: null
blockers: []
branch_name: null
worktree_path: null
pod_memory_bank: null
completed_at: null
integration_notes: ""
EOF

    # Initialize sequence
    echo "0" > "$SEQUENCE_FILE"
    
    log_success "LMAWEP initialized successfully"
    log_info "Next steps:"
    log_info "1. Edit $CONFIG_FILE to configure your project"
    log_info "2. Create your first ticket: ./lmawep ticket create \"My first ticket\""
}

# Create a new ticket
create_ticket() {
    check_init
    
    local title="$1"
    local ticket_type="${2:-task}"
    local priority="${3:-medium}"
    local description="${4:-}"
    
    if [ -z "$title" ]; then
        log_error "Ticket title is required"
        exit 1
    fi
    
    local ticket_id=$(next_ticket_id)
    local ticket_file="$TICKETS_DIR/ticket-$(printf "%03d" $ticket_id).yaml"
    local now=$(timestamp)
    
    cat > "$ticket_file" << EOF
id: $ticket_id
title: "$title"
description: |
  $description
type: $ticket_type
status: ready
priority: $priority
estimate: ""
assigned_to: null
dependencies: []
blocks: []
labels: []
created_by: "orchestrator"
created_at: "$now"
updated_at: "$now"
assignee_notes: ""
time_estimates:
  initial: null
  revised: null
actual_time: null
blockers: []
branch_name: null
worktree_path: null
pod_memory_bank: null
completed_at: null
integration_notes: ""
EOF
    
    log_success "Created ticket $ticket_id: $title"
    log_info "File: $ticket_file"
    echo "$ticket_id"
}

# List tickets
list_tickets() {
    check_init
    
    local status_filter="$1"
    local assigned_filter="$2"
    local format="${3:-table}"
    
    if [ ! -d "$TICKETS_DIR" ] || [ -z "$(ls -A "$TICKETS_DIR" 2>/dev/null)" ]; then
        log_info "No tickets found"
        return 0
    fi
    
    if [ "$format" = "table" ]; then
        printf "%-4s %-12s %-8s %-10s %-50s\n" "ID" "STATUS" "PRIORITY" "ASSIGNED" "TITLE"
        printf "%-4s %-12s %-8s %-10s %-50s\n" "----" "------------" "--------" "----------" "--------------------------------------------------"
    fi
    
    for ticket_file in "$TICKETS_DIR"/ticket-*.yaml; do
        if [ ! -f "$ticket_file" ]; then
            continue
        fi
        
        # Extract basic info using grep/sed (avoiding yq dependency)
        local id=$(grep "^id:" "$ticket_file" | sed 's/id: //')
        local title=$(grep "^title:" "$ticket_file" | sed 's/title: //' | tr -d '"')
        local status=$(grep "^status:" "$ticket_file" | sed 's/status: //')
        local priority=$(grep "^priority:" "$ticket_file" | sed 's/priority: //')
        local assigned=$(grep "^assigned_to:" "$ticket_file" | sed 's/assigned_to: //')
        
        # Apply filters
        if [ -n "$status_filter" ] && [ "$status" != "$status_filter" ]; then
            continue
        fi
        
        if [ -n "$assigned_filter" ] && [ "$assigned" != "$assigned_filter" ]; then
            continue
        fi
        
        if [ "$format" = "table" ]; then
            printf "%-4s %-12s %-8s %-10s %-50s\n" "$id" "$status" "$priority" "$assigned" "$title"
        else
            echo "$ticket_file"
        fi
    done
}

# Show ticket details
show_ticket() {
    check_init
    
    local ticket_id="$1"
    local format="${2:-yaml}"
    
    if [ -z "$ticket_id" ]; then
        log_error "Ticket ID is required"
        exit 1
    fi
    
    local ticket_file="$TICKETS_DIR/ticket-$(printf "%03d" $ticket_id).yaml"
    
    if [ ! -f "$ticket_file" ]; then
        log_error "Ticket $ticket_id not found"
        exit 1
    fi
    
    if [ "$format" = "yaml" ]; then
        cat "$ticket_file"
    else
        # Basic info extraction
        echo "Ticket #$ticket_id"
        echo "Title: $(grep "^title:" "$ticket_file" | sed 's/title: //' | tr -d '"')"
        echo "Status: $(grep "^status:" "$ticket_file" | sed 's/status: //')"
        echo "Priority: $(grep "^priority:" "$ticket_file" | sed 's/priority: //')"
        echo "Type: $(grep "^type:" "$ticket_file" | sed 's/type: //')"
        echo "Assigned: $(grep "^assigned_to:" "$ticket_file" | sed 's/assigned_to: //')"
        echo ""
        echo "Description:"
        sed -n '/^description: |$/,/^[a-z]/p' "$ticket_file" | grep -v "^description:" | grep -v "^[a-z]"
    fi
}

# Update ticket
update_ticket() {
    check_init
    
    local ticket_id="$1"
    local field="$2"
    local value="$3"
    
    if [ -z "$ticket_id" ] || [ -z "$field" ] || [ -z "$value" ]; then
        log_error "Usage: ./lmawep ticket update <id> <field> <value>"
        exit 1
    fi
    
    local ticket_file="$TICKETS_DIR/ticket-$(printf "%03d" $ticket_id).yaml"
    
    if [ ! -f "$ticket_file" ]; then
        log_error "Ticket $ticket_id not found"
        exit 1
    fi
    
    # Simple field updates using sed
    case "$field" in
        "status")
            sed -i "s/^status: .*/status: $value/" "$ticket_file"
            ;;
        "priority")
            sed -i "s/^priority: .*/priority: $value/" "$ticket_file"
            ;;
        "assigned_to")
            sed -i "s/^assigned_to: .*/assigned_to: $value/" "$ticket_file"
            ;;
        "estimate")
            sed -i "s/^estimate: .*/estimate: \"$value\"/" "$ticket_file"
            ;;
        *)
            log_error "Unknown field: $field"
            exit 1
            ;;
    esac
    
    # Update timestamp
    local now=$(timestamp)
    sed -i "s/^updated_at: .*/updated_at: \"$now\"/" "$ticket_file"
    
    log_success "Updated ticket $ticket_id: $field = $value"
}

# Add dependency
add_dependency() {
    check_init
    
    local dependent_id="$1"
    local dependency_id="$2"
    
    if [ -z "$dependent_id" ] || [ -z "$dependency_id" ]; then
        log_error "Usage: ./lmawep ticket depend <dependent_id> <dependency_id>"
        exit 1
    fi
    
    local ticket_file="$TICKETS_DIR/ticket-$(printf "%03d" $dependent_id).yaml"
    
    if [ ! -f "$ticket_file" ]; then
        log_error "Ticket $dependent_id not found"
        exit 1
    fi
    
    # Check if dependency exists
    local dep_file="$TICKETS_DIR/ticket-$(printf "%03d" $dependency_id).yaml"
    if [ ! -f "$dep_file" ]; then
        log_error "Dependency ticket $dependency_id not found"
        exit 1
    fi
    
    # Add dependency (simple implementation - just add to dependencies list)
    # This is a simplified version - full implementation would parse YAML properly
    log_info "Adding dependency: Ticket $dependent_id depends on ticket $dependency_id"
    log_warn "Note: Manual editing of $ticket_file may be required for complex dependencies"
    
    log_success "Dependency added"
}

# Show help
show_help() {
    cat << 'EOF'
LMAWEP - Local Multi-Agent Workflow Execution Process CLI

USAGE:
    ./lmawep <command> [options]

COMMANDS:
    init                              Initialize LMAWEP in current directory
    
    ticket create <title> [type] [priority]    Create new ticket
    ticket list [--status <status>]            List tickets
    ticket show <id> [--format yaml|info]      Show ticket details
    ticket update <id> <field> <value>         Update ticket field
    ticket depend <id> <dependency_id>         Add dependency
    
    help                              Show this help message

EXAMPLES:
    ./lmawep init
    ./lmawep ticket create "Add authentication" feature high
    ./lmawep ticket list --status ready
    ./lmawep ticket show 1
    ./lmawep ticket update 1 status working
    ./lmawep ticket depend 2 1

TICKET FIELDS:
    status: ready, assigned, working, blocked, review, complete
    priority: low, medium, high, critical  
    type: feature, bug, task, chore, docs

EOF
}

# Main command dispatcher
case "$1" in
    "init")
        init_lmawep
        ;;
    "ticket")
        case "$2" in
            "create")
                create_ticket "$3" "$4" "$5" "$6"
                ;;
            "list")
                if [ "$3" = "--status" ]; then
                    list_tickets "$4"
                elif [ "$3" = "--assigned-to" ]; then
                    list_tickets "" "$4"
                else
                    list_tickets
                fi
                ;;
            "show")
                if [ "$4" = "--format" ]; then
                    show_ticket "$3" "$5"
                else
                    show_ticket "$3"
                fi
                ;;
            "update")
                update_ticket "$3" "$4" "$5"
                ;;
            "depend")
                add_dependency "$3" "$4"
                ;;
            *)
                log_error "Unknown ticket command: $2"
                echo "Try: ./lmawep ticket {create|list|show|update|depend}"
                exit 1
                ;;
        esac
        ;;
    "help"|"--help"|"-h")
        show_help
        ;;
    "")
        show_help
        ;;
    *)
        log_error "Unknown command: $1"
        echo "Try: ./lmawep help"
        exit 1
        ;;
esac